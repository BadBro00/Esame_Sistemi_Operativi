
-----------------------------------------------------------------------------------------

**SHELL SCRIPTING**
---
*Script di Shell*
	Lo *shell scripting* è una pratica in cui si va a scrivere codice per la shell, che viene chiamato *script*, basati su combinazioni di comandi tipici offerti dal sistema operativo.
	I file contenenti istruzioni e i comandi di shell sono caratterizzati dall'**eseguibilità** :
		*Il permesso d'esecuzione dev'essere abilitato*, in modo da poter essere eseguito dal sistema operativo.
	Nei sistemi GNU/LINUX è possibile *programmare* la shell, cioè creare programmi per eseguire automaticamente operazioni che normalmente andrebbero eseguite a mano.
	Tutti i file di script hanno estensione *.sh*, e una volta redatto lo script è possibile impostarne il permesso d'esecuzione tramite `chmod +x <file>` , e successivamente si potrà procedere all'esecuzione con `./<file>`
	Uno shell script può contenere:
		1) Righe di comando, identificate da *#*
		2) Una prima riga di commento speciale, che indica quale shell usare, *#!/bin/bash*
		3) Comandi Linux
	La shell legge riga per riga ed in ordine tutti i comandi elencati nello script, ed esegue tutte le istruzioni che incontra, saltando i commenti, che iniziano con *#*.
	Nella shell esistono variabili predefinite, dette **built-in**, e le variabili definite dall'utente, dette **d'ambiente**. Il contenuto delle variabili è utilizzabile tramite l'operatore *$*, ad es : 
		`var = 5`
		`echo $var`
	Alcune variabili built-in nella shell sono:
		*#* : Il numero di argomenti dati allo script/alla funzione
		*?* : Exit status del processo precedente
		*$* : Process ID del processo di shell
		*!* : Process ID dell'ultimo comando eseguito
		*0* : nome della shell o dello script di shell
		*BASH* : Il pathname completo per invocare la bash
		*BASH_VERSION* : La versione dell'istanza della shell usata
		*USER* : Nome dell'utente corrente
		*HOME* : Nome della directory home corrente
	Una variabile può contenere anche *stringhe*, come ad esempio `stringa = scatola` o `stringa = 'centro direzionale'`
	I caratteri *< > & $ |* sono esempi di caratteri speciali, che hanno significati particolari per la shell. Talvolta è necessario usare i caratteri in modo *letterale*, senza far riferimento al loro significato speciale, usando il *quoting*, cioè ad esempio `&stringa`.

*Comandi*
	`echo`
		Il comando echo si occupa di stampare a schermo una variabile.
		`echo "ciao"` stamperà a schermo la stringa "ciao"
		`echo $x` stamperà a schermo il contenuto della variabile x
	`read`
		Il comando read si occupa di leggere l'input e salvarlo in una variabile.
		`read qualcosa` leggerà lo stdin e salverà il contenuto nella variabile *qualcosa*
	`&`
		Il comando & *redirige un canale ad un altro*
		`2>&1` redirige lo stderr nello stdout
	`Processi e Job`
		Ogni processo in UNIX/Linux è identificato dal PID. La shell definisce i comandi eseguiti dall'utente come *job*, per distinguerli dai processi di sistema. 
		Un qualsiasi processo viene eseguito in foreground, ma se si tratta di un processo che richiede un'elaborazione molto lunga, conviene eseguirlo in *background*, tramite il comando `<comando>&` .
		Per riportare in foreground un processo o un job, basta usare `fg %<ID>`. Per portare in background un processo è anche possibile usare `bg &<ID>`, sospendendolo precedentemente.
		Per sospendere un processo basta usare il carattere speciale `Ctrl+Z`
	`more` 
		Serve a visualizzare più testo di quello contenuto nella finestra della shell, che non riesce a mostrarlo tutto
	`less`
		Versione migliorata del comando more, permette anche di scorrere fra le pagine
	`wc` 
		*Word Count*, effettua un conto delle parole, separando le stringhe in token con delimitatore spazio.
		Opzioni:
			`wc -w` : Conta le parole
			`wc -l` : Conta le linee (righe)
			`wc -c` : Conta i caratteri
	`head/tail`
		Questi comandi servono a mostrare le prime/ultime N linee di un file. `head 10 <file>` mostra le *prime* 10 linee, `tail 10 <file>` le ultime 10.
	**Costrutti di programmazione della BASH**
		Alcune variabili sono *built-in*:
			1) *$HOME* : Home directory dell'utente
			2) *$PATH* : Lista di dierctory, separate da : per la ricerca di comandi
			3) *$PS1* : Prompt dei comandi, solitamente $
			4) *$PS2* : Prompt secondatrio, solitamente >
			5) *$ISF* : Separatore campi di Input
			6) *$0* : Nome script
			7) *$#* : Numero di parametri passati
			8) *$ $* : PID del processo script
		Se lo script è invocato con parametri, sono create alcune *variabili aggiuntive*:
			1) *$1,$2,...* : Parametri forniti
			2) $* : Lista di *tutti* i parametri, mostrata in una singola variabile, separata dall'IFS
			3) *$@* : Sottile variante di * che non usa l'IFS
	*Condizioni*
		Uno shell script può testare il codice d'uscita di qualsiasi comando, inclusi gli script utente. Ragion per cui è sempre consigliato usare un `exit` alla fine dei propri script.
		*Test*
			Molti script fanno un uso estensivo del comando `test` oppure del comando `[`, e con quest ultimo va usato anche `]` per questioni di leggibilità.
		*Condizioni sui file*
			1) *-d* : Vero se è DIR
			2) *-e* : Vero se esiste
			3) *-f* : Vero se è REG
			4) *-g* : Vero se set-group-id è 1
			5) *-r* : Vero se è leggibile
			6) *-s* : Vero se file ha dim>0
			7) *-u* : Vero se set-user-id è 1
			8) *-w* : Vero se file è scrivibile
			9) *-x* : Vero se file è eseguibile
		*Strutture di Controllo*
			*If/then - Else*
				Il costrutto if/then-else è molto simile all'if/else della programmazione, ma si basa su una particolarità : quando la condizione è vera si accede alla parte definita dal *then*.
				`if {"$Risposta" = "ciao"}`
				`then`
				`  echo "Giusto"`
				`else`
				` echo "Errato"`
				`fi`
				Il comando *fi* chiude l'if, è da intendere come *end if*.
			*elif*
				Un comando simile è `elif`, che consente di *innestare* condizioni ad un costrutto if/then-else
				`if {"$ANNI" -lt 10}`
				`then`
				`  echo "Bambino"`
				`elif{"$ANNI" -lt 18}`
				`then`
				` echo "Minorenne"`
				`else`
				`echo "Maggiorenne"`
				`fi`
			*Costrutto Condizionale*
				Il costrutto condizionale è simile allo *Switch*, in cui si deve avere un caso **fra vari casi diversi possibili**.
				`case variable in`
				` pattern [ |pattern ] ... comandi;;`
				`esac`
			*Ciclo While*
				Il ciclo while negli shell script ha una forma del tipo:
					`while condizione do`
						`comandi`
					`done`
				Un esempio è il seguente:
					`var = 0`
					`while["$var" -lt 10]`
					`do`
						`echo -n "$var"`
						`var = 'expr $var + 1' `
					`done`
				Il comando *expr* consente l'esecuzione di comandi aritmetici, ma l'esecuzione è lenta, poichè invocata una nuova shell per eseguire il comando
				Un'alternativa è l'*espansione* `$((...))` : Racchiudendo la variabile in queste parentesi, siamo in grado di ottimizzare l'efficienza delle operazioni aritmetiche più semplici.
			*Ciclo for*
				Il costrutto for consente di ciclare attraverso un range di valori, rappresentato da un qualsiasi insieme di stringhe:
					`for X in 1 2 3 4 5`
					`do`
						`echo $X`
					`done`
			*Funzioni*
				Una funzione è una sorta di script nello script. Si usa per assegnare un nome a porzioni di codice e conservarle in memoria.
				La sintassi per definire le funzioni è molto simile ai linguaggi di alto livello:
					`nome_funzione(){`
						`istruzioni`
					`}`
				Una volta creata, può essere richiamata usando `nomefunzione(argomenti)`.
				Le funzioni non sono eseguite in processi separati, mentre gli script sì. Se una funzione ha lo stesso nome di uno script o un eseguibile, *la funzione ha la precedenza*.
				Un esempio è il seguente:
					`tot_iva(){`
						`IVA = $(($1*20))`
						`IVA = $(($IVA/100))`
						`TOT = $(($1+$IVA))`
						`echo $TOT`
					`}`
					Dove $1 si riferisce al parametro passato dallo script che eseguirà la funzione
					Un esempio di run è:
						`DVD = 7`
						`BRAY = 12`
						`echo "Prezzo DVD+IVA: $(tot_iva $DVD) euro"`
						`echo "Prezzo BRAY+IVA: $(tot_iva $BRAY) euro"`
						->	`"Prezzo DVD+IVA: 8 euro"`
							`"Prezzo BRAY+IVA: 14 euro"`
				Le funzioni possono ritornare valori numerici tramite il comando *return*. Se non è specificato return, la funzione restituisce *lo stato d'uscita dell'ultimo comando eseguito*.
				Il modo per ritornare una stringa invece è semplicemente memorizzarla in una variabile che verrà usata dopo la terminazione della funzione.
-----------------------------------------------------------------------------------------

FINE SO
