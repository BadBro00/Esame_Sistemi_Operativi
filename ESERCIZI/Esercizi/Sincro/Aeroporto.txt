Si consideri il seguente problema:
I passeggeri in transito in un aeroporto prima di imbarcarsi sull'aereo, devono superare i controlli di sicurezza.
I controlli sono gestiti come segue:
  Ogni passeggero sceglie tra N code quella più breve cui accodarsi ed attendere il proprio turno per passare il controllo.
  Ogni coda è gestita da un addetto che lascia passare il primo passeggero della coda,
indirizzandolo verso una delle M code di accesso al metal detector.
  Ogni addetto indirizza il passeggero verso la coda più breve con lunghezza minore di K. 
    Se il numero di code con lunghezza minore di K è inferiore a M/2, gli addetti non lasciano passare i passeggeri finchè persiste tale condizione.
Dopo aver attraversato il metal detector, il passeggero si dirige all'imbarco.
---------------------------------------------------------------------------------------------------------------------

num_code : const int = N;
num_code_metal : const int = M;
max_code_lungh : const int = M/2;

code_metal : int[M] = {0,...,0};

coda_min : int = -1;
coda_scelta : int = -1;

controllo : semaforo[N] = {0,...,0};
coda_addetto : semaforo[N] = {0,...,0};

mutex : mutex = 1;

----------------------------------------

Passeggero(){
	while(1){
		//Scelgo la coda di lunghezza minore, e segnalo all'addetto che voglio entrare
		lock(mutex);
		coda_min = trova_min(coda_addetto);
		signal(coda_addetto[coda_min]);
		unlock(mutex);

		//Attendo il controllo
		wait(controllo[coda_min]);

		//Una volta fatti i controlli, devo andare alla coda scelta dall'addetto
		lock(mutex);
		code_metal[coda_scelta]++;
		unlock(mutex);
	}
}

Addetto(i){
	while(1){
		//Se la somma delle code con lunghezza K e' maggiore di M/2, posso far passare i passeggeri
		while(sum(coda_addetto,K) >= M/2){
			signal(coda_addetto[i]);
			//Trovo la coda metal di lunghezza minore di K
			coda_scelta = trova_min(code_metal,K);
			//Segnalo il controllo effettuato dall'addetto, sbloccando il processo
			signal(controllo[coda_min]);
		}
	}
}
