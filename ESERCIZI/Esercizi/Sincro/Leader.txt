In un sistema sono attivi N processi. Ogni processo si attribuisce un ID univoco nel sistema, con 0<=ID<N. 
Una volta che tutti i processi sono dotati di ID, si dividono in due gruppi: quelli con ID pari e quelli con ID dispari.
All’interno di ogni gruppo si elegge come leader il processo con PID (assegnato dal SO) minore. 
Il primo dei due leader che accede all’area di memoria condivisa M, ne stampa il contenuto a video.
Il procedimento viene ripetuto a partire dall’assegnazione degli ID.
--------------------------------------------------------------------------------------------------------------------------

VAR:
max_ID : const int = N;

mutex : mutex = 1;
CS : mutex = 1;
attesa : int = N;

gruppo_pari : array[N/2] = {...};
gruppo_disp : array[N/2] = {...};

fine_ID : condizione = 0;

-------------------------
Processo(i){
	//Imposto le mie variabili
	mypid := getpid();
	myID := i;
	//Se la mia i e' pari inserisco il mio PID nel gruppo dei pari
	if(!i%2){
		gruppo_pari[i] = mypid;
	}else{
		//Se la mia i e' dispari inserisco il mio PID nel gruppo dei dispari
		gruppo_disp[i] = mypid;
	}
	while(1){
		//Segnalo che ho fatto le mie cose
		lock(mutex);
		attesa--;
		unlock(mutex);
		//Blocco il mutex per controllare
		lock(mutex);
		if(attesa == 0){
			//Segnalo a tutti i processi che tutti han finito
			signal_broadcast(fine_ID);
			//Trova indici dei due valori minimi
			min_PID_D := trova_min(gruppo_disp);
			min_PID_P := trova_min(gruppo_pari);
			//Se sono uno dei due leader, blocco il mutex e stampo
			if(min_PID_D == i){
				lock(CS);
				Stampa();
				min_PID_P := -1; //Imposto a -1 cosi' nessuno avra' i=-1
			}else if(min_PID_P == i){
				lock(CS);
				Stampa();
				min_PID_D = -1; //Imposto a -1 cosi' nessuno avra' i=-1
			}
			//Altrimenti sblocco semplicemente il mutex
			unlock(CS);
		}else{
			//Se non hanno terminato tutti, sblocco il mutex e mi metto in attesa
			unlock(mutex);
			wait(fine_ID);
		}
	}
}
