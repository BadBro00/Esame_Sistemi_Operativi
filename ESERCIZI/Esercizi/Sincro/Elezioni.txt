Un sistema è composto di un buffer di N posizioni, 2*N processi attivi ed un processo coordinatore. Il processo
coordinatore estrae uno dopo l'altro in maniera casuale i numeri da 1 a N e ad ogni estrazione i processi
competono per aggiudicarsi l'accesso alla posizione corrispondente del buffer, scrivendone il proprio PID. Un
processo cha ha scritto il proprio PID nel buffer non partecipa più alla contesa. Quando tutte le posizioni del
buffer sono state assegnate, il coordinatore si alterna con l’ultimo processo che ha avuto accesso al buffer nel
leggere e stampare, uno alla volta, il contenuto del buffer


-----------------------------------------------------------------------------------------------------------------
VAR:

Posizioni : const int = N
NProc : const int = 2*N

extr_num : int = 0
buf_idx : int = N
buffer : array = {...}

mypid : pid = 0
pid_last : pid = 0

contesa : semaforo[NProc] = {1,...,1}
choosing : semaforo = 1
read_write : semaforo = 0

mutex : mutex = 1
-----------------------------------------------------------------------------------------------------------------
PROCESSI:

P(i){
	while(1){
		mypid = getpid()
		if(contesa[i]){
			wait(choosing)
			lock(mutex)
			buffer[extr_num] = mypid
			wait(contesa[i])
			unlock(mutex)
		}
		if(mypid == pid_last && buf_idx >= 0){
			wait(read_write)
			buffer[buf_idx] = 0
			Stampa_a_Video()
			buf_idx--
			signal(read_write)
		}else{
			block()
		}
	}	
}

Coordinatore(){
	while(1){
		wait(choosing)
		for i=1 to N
		extr_num = rand()%N
		pid_last = buffer[extr_num]
		while(buf_idx >= 0){
			wait(read_write)
			buffer[buf_idx] = 0
			Stampa_a_Video()
			buf_idx--
			signal(read_write)
		}
	}
}
