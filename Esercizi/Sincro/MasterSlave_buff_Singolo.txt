N worker, N/2 master.
Master i-simo controlla (i*2)-simo e (i*2+1)-simo slave.
I master estraggono un int in [1,N], il master con num maggiore, comunica agli slave di produrre
	ognuno un num casuale di elem.
Gli elementi prodotti uno a volta, e letti dal master. 
Quando son letti tutti, ripeti da capo.

--------------------------------------------------------------------------
num_mast : const int = N/2;
num_slave : const int = N;

num_elem : int = ...;

buffer : array[0] = ...;
estrazioni : array[N/2] = {...};

fine_estr : condizione = false;//=0

estratti : semaforo = 0;
pieno : semaforo = 0;
vuoto : semaforo = 1;

produci : semaforo[N] = {0,...,0};
--------------------------------

Master(i){
	while(1){
		elem_estr = rand()%N;
		estrazioni[i] = elem_estr;
		signal(estratti);
		if(estratti == N/2)
			signal(fine_estr);
		wait(fine_estr);
		num_max := Trova_Max(estrazioni); //Ritorna l'indice dell'array con elem max
		if(num_max == i){
			num_elem = rand()%N;
			for i=1 to num_elem{
				signal(produci[i*2]);
				signal(produci[i*2+1]);
				wait(pieno);
				//Leggi()
				signal(vuoto);
			}
		}else{
			wait(fine_estr);
		}
	}
}

Slave(i){
	while(1){
		wait(produci[i]);
		wait(vuoto);
		lock(mutex);
		buffer[0] := rand()%N;
		unlock(mutex);
		signal(pieno);
	}
}
		