12/5/2022

max_cand : const int = N;

cand_attesa : semaforo = K(>N);
cand_ammessi : semaforo = N;
turno : semaforo = 1;
------------------------------

Candidato(){
	while(1){
		signal(cand_attesa);
		wait(turno);
		//Interview()
		signal(cand_ammessi);
	}
}

Addetto(){
	while(1){
		wait(cand_attesa);
		wait(cand_ammessi);
		signal(turno);
		//if(cand_attesa == 0)
		//	Termina();
	}
}
-----------------------------------------------------------------

K > N cand -> N entrano, K-N fuori 
"i restanti .. alla successiva" -> K iniziale = K-N ripeti

50 candidati
10 possono entrare

40 fuori

-> 40 candidati
10  possono...

``````````````````````````````````````````````````````````````````
In un ristorante self-service, i clienti, dopo aver mangiato,
dispongono i vassoi in M contenitori, ognuno di K ripiani.
Periodicamente, un addetto sceglie un contenitore 
tra quelli in cui ci sono piÃ¹ ripiani liberi, losvuota, lava i piatti e riporta il contenitore in sala.

var:
n_cont : const int = M;
n_rip : const int = K;

Contenitori : semaforo[M] = {K,...,K}; //K = K vassoi liberi
ptr : int = 0;
--------------------------------------

Cliente(){

	Mangia();
	indice := trova_max(contenitori); //indice = 1 -> Contenitori[1] = 0 => quel semaforo non ha rip liberi
	if(Contenitori[indice] < K)
		signal(Contenitori[indice])
	